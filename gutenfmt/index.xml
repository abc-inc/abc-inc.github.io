<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gutenfmt</title><link>https://abc-inc.github.io/gutenfmt/</link><description>Recent content on gutenfmt</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://abc-inc.github.io/gutenfmt/index.xml" rel="self" type="application/rss+xml"/><item><title>Customization</title><link>https://abc-inc.github.io/gutenfmt/lib/custom/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://abc-inc.github.io/gutenfmt/lib/custom/</guid><description>Formatting maps The order is not specified and is not guaranteed to be the same from one invocation to the next. If a certain order is required, you must define a custom Formatter and specify the order:
m := map[string]interface{}{&amp;#34;a&amp;#34;: &amp;#34;A&amp;#34;, &amp;#34;b&amp;#34;: &amp;#34;B&amp;#34;, &amp;#34;c&amp;#34;: &amp;#34;C&amp;#34;} w := NewTab(os.Stdout) // Create a custom formatter, which outputs certain map entries in the given order. ks := []reflect.Value{reflect.ValueOf(&amp;#34;c&amp;#34;), reflect.ValueOf(&amp;#34;a&amp;#34;)} f := formatter.FromMapKeys(&amp;#34;\t&amp;#34;, &amp;#34;\t\n&amp;#34;, ks.</description></item><item><title>Examples</title><link>https://abc-inc.github.io/gutenfmt/lib/examples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://abc-inc.github.io/gutenfmt/lib/examples/</guid><description>The examples listed on this page use the following model:
type User struct { Name string `json:&amp;#34;username&amp;#34; yaml:&amp;#34;Username&amp;#34;` Mail string `json:&amp;#34;email&amp;#34; yaml:&amp;#34;E-Mail&amp;#34;` Password string `json:&amp;#34;-&amp;#34; yaml:&amp;#34;-&amp;#34;` } type Team struct { name string members []User } JSON with custom Formatter Note that Team does not have any field tags. Thus, a custom Formatter is required in order to obtain a proper string representation. Moreover, it prints the number of Team members instead of enumerating them.</description></item><item><title>Getting Started</title><link>https://abc-inc.github.io/gutenfmt/lib/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://abc-inc.github.io/gutenfmt/lib/getting-started/</guid><description>Concepts Writer Formatter Resolver Writer gfmt.Writer is the interface that wraps the generic Write method, which writes arbitrary types to the underlying output stream. Typically, this is an io.Writer such as http.ResponseWriter. Write returns the number of bytes written and any error encountered that caused the write to stop early.
type Writer interface { Write(i interface{}) (int, error) } Formatter A gfmt.Formatter converts values of a certain type to their string representation.</description></item><item><title>json</title><link>https://abc-inc.github.io/gutenfmt/cmd/output/json/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://abc-inc.github.io/gutenfmt/cmd/output/json/</guid><description>JSON string. This setting is the default for non-terminals.</description></item><item><title>jsonc</title><link>https://abc-inc.github.io/gutenfmt/cmd/output/jsonc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://abc-inc.github.io/gutenfmt/cmd/output/jsonc/</guid><description>Colorized JSON. This setting is the default for interactive terminals.</description></item><item><title>Similar Projects</title><link>https://abc-inc.github.io/gutenfmt/intro/similar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://abc-inc.github.io/gutenfmt/intro/similar/</guid><description>The following list contains Go libraries (in alphabetic order) with similar features:
Libraries https://github.com/juju/cmd - lightweight abstraction, comes with three formatters https://github.com/drewstinnett/go-output-format - comprehensive library, lots of features https://github.com/thediveo/klo - comprehensive library, lots of features Feature Comparison Feature gutenfmt (CLI) gutenfmt (lib) cmd go-output-format klo Output CSV ✔️ Output JSON ✔️ ✔️ ✔️ ✔️ ✔️ Output JSON (pretty) ✔️ ✔️ Output Table ✔️ ✔️ ✔️ Output Template ✔️ ✔️ ✔️ Output Text ✔️ ✔️ ✔️ ✔️ Output TSV ✔️ ✔️ ✔️ Output YAML ✔️ ✔️ ✔️ ✔️ ✔️ Output YAML (pretty) ✔️ ✔️ Output &amp;ldquo;Smart&amp;rdquo; (detect) ✔️ Query with JSONPath ✔️ ✔️ Sorting 〰️ ✔️ If you know a similar project, or the feature comparison is outdated, please submit a pull request.</description></item><item><title>table</title><link>https://abc-inc.github.io/gutenfmt/cmd/output/table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://abc-inc.github.io/gutenfmt/cmd/output/table/</guid><description>ASCII table.</description></item><item><title>text</title><link>https://abc-inc.github.io/gutenfmt/cmd/output/text/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://abc-inc.github.io/gutenfmt/cmd/output/text/</guid><description>Name and value pairs, separated by equal sign.</description></item><item><title>tsv</title><link>https://abc-inc.github.io/gutenfmt/cmd/output/tsv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://abc-inc.github.io/gutenfmt/cmd/output/tsv/</guid><description>Tab-separated name and value pairs (useful for grep, sed, or awk).</description></item><item><title>yaml</title><link>https://abc-inc.github.io/gutenfmt/cmd/output/yaml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://abc-inc.github.io/gutenfmt/cmd/output/yaml/</guid><description>YAML, a machine-readable alternative to JSON.</description></item><item><title>yamlc</title><link>https://abc-inc.github.io/gutenfmt/cmd/output/yamlc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://abc-inc.github.io/gutenfmt/cmd/output/yamlc/</guid><description>Colorized YAML.</description></item></channel></rss>